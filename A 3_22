<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        button { width: 100px; height: 100px; margin: 1px; background-color: white; }
    </style>
</head>
<body>
    <h1>문제 내용</h1>
    <td>시작지점에서 끝지점까지 홀수길만 체크해서 이으시오 (단, 대각선은 이동이 불가능합니다.)</td>
    <div class="row">
        <button id="1_1">start</button>
        <button id="1_2"></button>
        <button id="1_3"></button>
        <button id="1_4"></button>
    </div>
    <div class="row">
        <button id="2_1"></button>
        <button id="2_2"></button>
        <button id="2_3"></button>
        <button id="2_4"></button>
    </div>
    <div class="row">
        <button id="3_1"></button>
        <button id="3_2"></button>
        <button id="3_3"></button>
        <button id="3_4"></button>
    </div>
    <div class="row">
        <button id="4_1"></button>
        <button id="4_2"></button>
        <button id="4_3"></button>
        <button id="4_4">end</button>
    </div>
    <div class="row">
        <button id="end" style="width: 100px; height: 50px; margin: 1px;">제출</button>
    </div>
    <script>
        let clickedButtons = [];
        let lastClickedButton = null; // 마지막으로 클릭된 버튼
        let clickEnded = false; // 종료 여부

        // 숫자 랜덤 생성
        const generateRandomExpression = (ensureOdd = false) => {
            let num1, num2, sum;
            do {
                num1 = Math.floor(Math.random() * 90) + 10; // 10부터 99까지 랜덤 생성
                num2 = Math.floor(Math.random() * 90) + 10;
                sum = num1 + num2;
            } while (ensureOdd && sum % 2 === 0); // 지정된 길의 합계가 짝수일 경우 홀수로 다시 생성
            return `${num1}+${num2}`;
        };

        // 모든 버튼에 랜덤 수식 설정(1_1, 4_4, 제출버튼 제외)
        const setRandomExpressions = () => {
            document.querySelectorAll('button').forEach(button => {
                if (button.id !== '1_1' && button.id !== '4_4' && button.id !== 'end') {
                    button.innerText = generateRandomExpression();
                }
            });
        };

        // 정답으로 가는 길 설정(최소 1개가 나오게끔)
        const ensurePath = () => {
            const paths = [
                ["1_1", "1_2", "1_3", "1_4", "2_4", "3_4", "4_4"],
                ["1_1", "2_1", "3_1", "4_1", "4_2", "4_3", "4_4"],
                ["1_1", "2_1", "2_2", "2_3", "2_4", "3_4", "4_4"],
                ["1_1", "1_2", "2_2", "3_2", "4_2", "4_3", "4_4"]
            ];
            const chosenPath = paths[Math.floor(Math.random() * paths.length)];

            // 1_1, 4_4 내용 변경 방지
            chosenPath.forEach(id => {
                if (id !== "1_1" && id !== "4_4") {
                    const button = document.getElementById(id);
                    button.innerText = generateRandomExpression(true);
                }
            });
        };

        // 버튼 클릭 시 색깔 변경
        const changecolor = () => {
            return (event) => {
                if (clickEnded) {
                    return; // 종료 시 클릭 이벤트 무시
                }

                const target = event.target;

                // 제출 버튼 클릭 색 변경 막기
                if (target.id === 'end') {
                    return;
                }

                // 버튼 색 변경
                if (target.style.backgroundColor === 'red') {
                    target.style.backgroundColor = 'white';
                    clickedButtons = clickedButtons.filter(button => button !== target);
                } else {
                    target.style.backgroundColor = 'red';
                    clickedButtons.push(target);
                }

                // 다른 버튼 활성화 방지
                disableAllButtons();

                // 마지막으로 클릭된 빨간색 버튼 업데이트
                lastClickedButton = clickedButtons[clickedButtons.length - 1];

                // 마지막 클릭된 버튼 및 인접 버튼 활성화
                if (lastClickedButton) {
                    enableAdjacentButtons(lastClickedButton.id);
                    lastClickedButton.disabled = false;
                }

                // start 버튼 인접 버튼 재활성화
                if (clickedButtons.length === 0 || clickedButtons.every(button => button.style.backgroundColor === 'white')) {
                    enableAdjacentButtons('1_1');
                }

            };
        };

        // 홀수 확인
        const checkAllOdd = (event) => {
            if (clickEnded) {
                return; // 종료 시 클릭 이벤트 무시
            }

            event.stopPropagation(); // 이벤트 발생 방지

            const endButtonClicked = clickedButtons.some(button => button.id === '4_4');
            if (!endButtonClicked) {
                alert('end 버튼을 눌러야 제출할 수 있습니다.');
                return;
            }

            const isAllOdd = clickedButtons.every(button => {
                const value = button.innerText;
                return isOdd(sumOfDigits(value));
            });

            if (isAllOdd) {
                alert('성공!');
            } else {
                alert('실패!');
            }

            clickEnded = true; // 종료 설정
        };

        // 시작 버튼과 제출버튼 비활성화 방지
        const disableAllButtons = () => {
            document.querySelectorAll('button').forEach(button => {
                if (button.id !== '1_1' && button.id !== 'end') {
                    button.disabled = true;
                }
            });
        };

        // 버튼 상하좌우 활성화
        const enableAdjacentButtons = (id) => {
            const [row, col] = id.split('_').map(Number);

            const adjacentIds = [
                `${row - 1}_${col}`, // up
                `${row + 1}_${col}`, // down
                `${row}_${col - 1}`, // left
                `${row}_${col + 1}`  // right
            ];

            adjacentIds.forEach(adjId => {
                const button = document.getElementById(adjId);
                if (button && button.style.backgroundColor !== 'red') {
                    button.disabled = false;
                }
            });
        };

        // 홀수 확인용
        const isOdd = (number) => {
            return number % 2 !== 0;
        };

        // 버튼 텍스트 내용 계산
        const sumOfDigits = (value) => {
            return value.split('+').reduce((sum, num) => sum + parseInt(num), 0);
        };

        // 버튼 클릭 시 changecolor 실행
        document.querySelectorAll('button').forEach(button => {
            button.addEventListener('click', changecolor());
        });

        // end 버튼 클릭 시 결과 실행
        document.getElementById('end').addEventListener('click', (event) => {
            checkAllOdd(event);
        });

        // 버튼 내용 랜덤 생성
        setRandomExpressions();

        // 정답 길 설정
        ensurePath();

        // 시작 버튼 설정
        enableAdjacentButtons('1_1');

        // 모든 버튼 비활성화
        disableAllButtons();
    </script>
</body>
</html>
